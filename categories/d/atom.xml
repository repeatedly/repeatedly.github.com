<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: D | Go ahead!]]></title>
  <link href="http://repeatedly.github.com/categories/d/atom.xml" rel="self"/>
  <link href="http://repeatedly.github.com/"/>
  <updated>2013-10-20T07:51:46+09:00</updated>
  <id>http://repeatedly.github.com/</id>
  <author>
    <name><![CDATA[Masahiro Nakagawa]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[D言語の現状]]></title>
    <link href="http://repeatedly.github.com/ja/2013/10/d-status-2013/"/>
    <updated>2013-10-20T00:43:00+09:00</updated>
    <id>http://repeatedly.github.com/ja/2013/10/d-status-2013</id>
    <content type="html"><![CDATA[<p><a href="http://japan.internet.com/webtech/20131018/5.html">「FacebookがプロダクションでD言語の利用を始めた」ことに関する記事</a>が少し話題になってます．で，これだけだとD言語が他の言語のようにプロダクションreadyと勘違いする方もいるかもしれないので，今の現状について書いておきます．</p>

<h2>この記事の一言まとめ</h2>

<p>手軽にプロダクションで使えるわけではありません！</p>

<p>詳細が知りたい方は以降をお読みください.</p>

<!-- more -->


<h2>今回の話</h2>

<p>FacebookのAndreiはTDPLという本を出した，D言語界隈でも主要なコミッタです．その一方，C++界隈でも有名な人物で，そういう人物がついにC++をやめてプロダクションでD言語を使った，というのが一つの大きなニュースです．</p>

<p>また，Facebookには<a href="http://qiita.com/yasei_no_otoko/items/17f672ec30393a2f928a">この記事</a>を書いたBenなど，D言語を使えるエンジニアが他にもいます．</p>

<h2>プロダクションでつかえるのか？</h2>

<p>簡単に言うと，「品質的には問題が無い，が今広まってる言語ほど楽ではない」です．JavaやRuby/Python/PHPなどWebで広く使われているような言語のように，たくさんのライブラリがある訳ではありません．</p>

<p>Dubというパッケージマネージャが最近出てきましたが，<a href="http://japan.internet.com/webtech/20131018/5.html">登録されているライブラリ</a>はまだ多くなく，なければ自分で書く必要があります．また，ライブラリにバグがあっても他の誰かが報告してくれるほどコミュニティも大きくないので，その辺も気をつける必要があります．まぁ大抵github/bitbucketなので，今時のエンジニアには楽だとは思いますが…</p>

<p>今プロダクションでD言語を使っている会社はFacebook以外にももちろんありますが(広告配信，ゲーム，社内システム，Webサーバなど)，そういう会社は大抵D言語でライブラリを書いてるような精通した人物が開発陣の中にいるのが現状です．まぁ，メジャーではない言語ではよくある光景だと思います．</p>

<p>プロダクション以外だと，研究とかでつかっている人は増えている感じがします．数値計算系，言語処理系，自然言語処理系，などなど書きやすさとパフォーマンスのバランスで選ばれているようです．</p>

<h2>互換性</h2>

<p>D言語を使ってない方からよく「D言語は互換性を維持しないからクソだ」という意見を聞くのですが，これにはいくつか理由があります．</p>

<h3>シェアがない</h3>

<p>当たり前ですが，シェアがない言語が律儀に互換性を維持してリリースすることのメリットはほぼありません．ライブラリも多くない言語では，互換性がなくなって困るライブラリはほとんどなく，ライブラリ開発者もほとんどが言語仕様の議論に参加しているので，基本問題は起きません．</p>

<h3>コミュニティの方向性</h3>

<p>上と関わりがありますが，今コミュニティとして，互換性よりも言語を良くしよう，という流れの方が強いです．</p>

<ul>
<li>この機能あった方がライブラリとかアプリが書きやすい</li>
<li>新しい機能でよりよいAPIが出来たのでこっちに移行</li>
<li>この機能は誰も使ってないから削除</li>
<li>この機能使うとこういう危険なコードになるので削除</li>
</ul>


<p>みたいな．これは今後プロダクションでの利用が増え，「互換性は保った方がいいんじゃないか？」という開発者が増えれば，流れは変わると思います．この辺はPythonやScalaなど，今時の言語と同じような感じかなと． <br />
今後に備えて，「bug fixリリースも考慮した開発フロー・バージョニングにした方がいいんじゃないか？」という提案はあがったりしてます．</p>

<h3>開発の流れ</h3>

<p>現状はD2しかメジャーバージョンがないんですが(D1のメンテナンスは終了)，これが開発版/安定版みたいになってます．昔と違って</p>

<ul>
<li>リグレッションがあったらリリースしない</li>
<li>リリース前にβ版を公開してフィードバックを得る</li>
<li>削除/変更するAPIは数ヶ月以上前から警告が出る</li>
</ul>


<p>などなど利用者がいきなり非互換にぶち当たるようなことが起きないように配慮はされてます．D言語はコンパイル時にシンボルやシグネチャをチェック出来る機構があり，ライブラリ開発者としても，多少の変更があってもそれで対応出来てます．<br />
なので，互換性に関しては少し寛容なのかもしれません．</p>

<p>「D2に入れるには大きすぎるかもしれない変更はD3で議論しよう」という流れになってるので，D2で今後パラダイムに関わるような大きな変更は起きないとは思います．</p>

<h2>まとめ</h2>

<p>記事で言及されている通り，言語，ライブラリ，開発環境，などなど昔に比べて成熟してきているのは確かですが，ご利用は計画的に，というが本当の所です．<br />
ポジション的にはHaskellやGoに近い所にいて，メジャーとは言い切れないがパワーユーザが使っていて，コミュニティが大きくなりつつあるという感じです．Facebookはこれからも利用箇所を増やすでしょうし，海外では他の事例もちょくちょく出てきそうです．日本は…よく分からんですｗ</p>

<p>とはいえ，日本はアクティブなコミッタが3人いたりと，実はD言語をする環境としては恵まれていたりしてます．困ったら #dlang をつけてTwitterでつぶやくと，誰かが助けてくれるかもしれません．日本語情報については，<a href="https://twitter.com/repeatedly/status/391191903418322944">このtweet</a>を参考にしてください．</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[プログラミング言語D]]></title>
    <link href="http://repeatedly.github.com/ja/2013/05/tdpl-japanese-edition/"/>
    <updated>2013-05-13T01:44:00+09:00</updated>
    <id>http://repeatedly.github.com/ja/2013/05/tdpl-japanese-edition</id>
    <content type="html"><![CDATA[<p><a href="http://forum.dlang.org/thread/ttyydpzuhtpgxagkynhq@forum.dlang.org">フォーラム</a>にポストしてブログで書くの忘れてました！</p>

<p><img src="/images/tdpl_jp_edition.png" title="&#34;TDPL Japanese Edition&#34;" alt="&#34;TDPL Japanese Edition&#34;"></p>

<ul>
<li><a href="http://books.shoeisha.co.jp/book/b108222.html">プログラミング言語D</a></li>
<li><a href="http://www.shoeisha.co.jp/book/qa/15615/list">正誤表</a> : 誤字や誤訳などあれば，こちらから報告してもらえると助かります</li>
</ul>


<p>Andreiが書いたD言語本，通称<a href="http://erdani.com/index.php/books/tdpl/">TDPL</a>の日本語版が翔泳社さんから出版されました．俺と原さんが監訳者として参加してました．<br />
翻訳された長尾さんの訳の質も高く，監訳のチェックは技術的なものに注力出来ました．</p>

<p>最初に断っておくと，TDPLはD言語の本であって入門本ではありません．
ある程度，他の言語を触っていてプログラミングに関して知っていることが前提になっています．</p>

<p>その変わりと言っては何ですが，単なる文法の説明などにとどまらず「なぜD言語がこの機能を採用したのか」
なども書かれている本になっています．そのため，それなりに読み応えのある本だと思います．<br />
また，Andreiのノリ？が極力残るように勤めました．</p>

<p>TDPL自体は2010年出版ですが，最新のバージョンである2.062までの変更はちゃんとフォローしています．
モジュール名含めコードも一部新しくなってますし，新機能に関してはコラムなどで説明しています．<br />
もし何か疑問などあれば，Twitterならば #dlang つけて呟くと，親切なD言語erが答えてくれると思います．</p>

<p>この本が出版されたことで，一つ肩の荷が下りたかなという感じです．
D言語を始める始めないに関わらず，どういう言語なのかを知って貰える一冊なのは確かです．</p>

<p>Enjoy D！</p>

<h2>P.S.</h2>

<p>恒例のアレなリンクです．すでに1ヶ月経ってますが，こちらから買ってもらえると俺が喜びます :)</p>

<p><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798131105/repeatedly-22/ref=nosim/">Amazon</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LTSV for D]]></title>
    <link href="http://repeatedly.github.com/2013/02/ltsv-for-d/"/>
    <updated>2013-02-10T04:10:00+09:00</updated>
    <id>http://repeatedly.github.com/2013/02/ltsv-for-d</id>
    <content type="html"><![CDATA[<p>In this week, Shinji Tanaka announced <a href="http://ltsv.org/">Labeled Tab-separated Values (LTSV)</a>.
LTSV is the flexible and robust row oriented format.</p>

<p>I just implemented ltsv-d for D programming language.</p>

<p><a href="http://github.com/repeatedly/ltsv-d">LTSV for D</a></p>

<p>ltsv-d provides <code>fromLTSV</code> and <code>toLTSV</code> functions.</p>

<p><code>fromLTSV</code> for parsing:</p>

<p><code>d
auto apacheLog = "host:127.0.0.1\tident:-\tuser:foo\ttime:[10/Oct/2000:13:55:36 -0700]\treq:GET /apache.gif HTTP/1.0\tstatus:200\tsize:777\treferer:http://www.example.com/start.html\tua:Mozilla/4.08 [en] (Win98; I ;Nav)";
auto record = fromLTSV(apacheLog);
writeln(record["host"]); // "127.0.0.1"
</code></p>

<p><code>toLTSV</code> for dumping:</p>

<p><code>d
auto line = ["foo":"bar", "hoge":"fuga", "piyo":"puyo"].toLTSV();
writeln(line); // "foo:bar\thoge:fuga\tpiyo:puyo"
</code></p>

<p>Enjoy LTSV!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[yajl-d]]></title>
    <link href="http://repeatedly.github.com/2013/01/yajl-d/"/>
    <updated>2013-01-20T05:27:00+09:00</updated>
    <id>http://repeatedly.github.com/2013/01/yajl-d</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/repeatedly/yajl-d">yajl-d</a> is the D binding for <a href="http://lloyd.github.com/yajl/">YAJL</a>.</p>

<p>YAJL provides the stream JSON parsing and some extra features, e.g. allow comments.</p>

<p>yajl-d also provides the JSON encoding and stream decoding.
yajl-d is 2 - 3 times faster than std.json (try simple benchmark in example directory).</p>

<p>Following code is basic form:</p>

<p>```d
import yajl.yajl;</p>

<p>// yajl-d can serialize / deserialize D object.
struct Hoge
{</p>

<pre><code>ulong id;
string word;
bool yes; 
</code></pre>

<p>}</p>

<p>// {"id":100,"word":"hey!","yes":true}
Hoge hoge1 = Hoge(100, "hey!", true);
Hoge hoge2 = decode!Hoge(encode(hoge1));
assert(hoge1 == hoge2);
```</p>

<p><code>encode</code> and <code>decode</code> are the wrapper of <code>Encoder</code> and <code>Decoder</code>. If you want to know more details of <code>Encoder</code> and <code>Decoder</code>. See README and the DDoc.</p>

<p>yajl-d has already listed in the official site.
Thanks to Lloyd!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[siphash-d]]></title>
    <link href="http://repeatedly.github.com/2012/12/siphash-d/"/>
    <updated>2012-12-04T22:57:00+09:00</updated>
    <id>http://repeatedly.github.com/2012/12/siphash-d</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/repeatedly/siphash-d">siphash-d</a> is the D implementation of <a href="https://131002.net/siphash/">SipHash</a>.</p>

<p>The latest CRuby uses SipHash to prevent <a href="http://www.ruby-lang.org/en/news/2012/11/09/ruby19-hashdos-cve-2012-5371/">Hash-flooding DoS attack</a>. From now on, SipHash like algorithm will be important for robust application. So I implemented SipHash for D.</p>

<p>Current version provides only siphash24 function:</p>

<p>```d
import siphash;</p>

<p>ubyte[16] k = cast(ubyte[])"To be|not to be!";
ubyte[] msg = cast(ubyte[])"that is the question.";
auto hashed = siphash24(k, msg);
```</p>

<p>I plan to add std.digest like struct and other APIs if needed.</p>

<p>siphash-d has already listed in the official site.
Thanks to JP Aumasson!</p>
]]></content>
  </entry>
  
</feed>
